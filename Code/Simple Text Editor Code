import tkinter as tk
from tkinter import filedialog, messagebox, Menu
import os

class SimpleTextEditor:
    def __init__(self, root):
        self.root = root
        self.root.title("Simple Text Editor")
        self.root.geometry("800x600")
        
        # Current file path
        self.current_file = None
        
        # Create menu bar
        self.create_menu()
        
        # Create text widget with scrollbar
        self.create_text_area()
        
        # Track if file has been modified
        self.modified = False
        self.text_area.bind('<<Modified>>', self.on_text_change)
    
    def create_menu(self):
        menubar = Menu(self.root)
        self.root.config(menu=menubar)
        
        # File menu
        file_menu = Menu(menubar, tearoff=0)
        menubar.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="New", command=self.new_file, accelerator="Ctrl+N")
        file_menu.add_command(label="Open", command=self.open_file, accelerator="Ctrl+O")
        file_menu.add_command(label="Save", command=self.save_file, accelerator="Ctrl+S")
        file_menu.add_command(label="Save As", command=self.save_as_file, accelerator="Ctrl+Shift+S")
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=self.exit_app)
        
        # Edit menu
        edit_menu = Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Edit", menu=edit_menu)
        edit_menu.add_command(label="Cut", command=self.cut_text, accelerator="Ctrl+X")
        edit_menu.add_command(label="Copy", command=self.copy_text, accelerator="Ctrl+C")
        edit_menu.add_command(label="Paste", command=self.paste_text, accelerator="Ctrl+V")
        edit_menu.add_command(label="Select All", command=self.select_all, accelerator="Ctrl+A")
        
        # Bind keyboard shortcuts
        self.root.bind('<Control-n>', lambda e: self.new_file())
        self.root.bind('<Control-o>', lambda e: self.open_file())
        self.root.bind('<Control-s>', lambda e: self.save_file())
        self.root.bind('<Control-S>', lambda e: self.save_as_file())
        self.root.bind('<Control-x>', lambda e: self.cut_text())
        self.root.bind('<Control-c>', lambda e: self.copy_text())
        self.root.bind('<Control-v>', lambda e: self.paste_text())
        self.root.bind('<Control-a>', lambda e: self.select_all())
    
    def create_text_area(self):
        # Create frame for text area and scrollbar
        text_frame = tk.Frame(self.root)
        text_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Create text widget
        self.text_area = tk.Text(text_frame, wrap=tk.WORD, font=("Arial", 12))
        self.text_area.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Create scrollbar
        scrollbar = tk.Scrollbar(text_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Connect scrollbar to text widget
        self.text_area.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.text_area.yview)
    
    def on_text_change(self, event=None):
        if self.text_area.edit_modified():
            self.modified = True
            self.update_title()
            self.text_area.edit_modified(False)
    
    def update_title(self):
        if self.current_file:
            filename = os.path.basename(self.current_file)
        else:
            filename = "Untitled"
        
        title = f"Simple Text Editor - {filename}"
        if self.modified:
            title += " *"
        
        self.root.title(title)
    
    def new_file(self):
        if self.check_save_changes():
            self.text_area.delete(1.0, tk.END)
            self.current_file = None
            self.modified = False
            self.update_title()
    
    def open_file(self):
        if self.check_save_changes():
            file_path = filedialog.askopenfilename(
                title="Open File",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
            )
            
            if file_path:
                try:
                    with open(file_path, 'r', encoding='utf-8') as file:
                        content = file.read()
                        self.text_area.delete(1.0, tk.END)
                        self.text_area.insert(1.0, content)
                        self.current_file = file_path
                        self.modified = False
                        self.update_title()
                except Exception as e:
                    messagebox.showerror("Error", f"Could not open file: {str(e)}")
    
    def save_file(self):
        if self.current_file:
            try:
                content = self.text_area.get(1.0, tk.END)
                with open(self.current_file, 'w', encoding='utf-8') as file:
                    file.write(content)
                self.modified = False
                self.update_title()
                return True
            except Exception as e:
                messagebox.showerror("Error", f"Could not save file: {str(e)}")
                return False
        else:
            return self.save_as_file()
    
    def save_as_file(self):
        file_path = filedialog.asksaveasfilename(
            title="Save As",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                content = self.text_area.get(1.0, tk.END)
                with open(file_path, 'w', encoding='utf-8') as file:
                    file.write(content)
                self.current_file = file_path
                self.modified = False
                self.update_title()
                return True
            except Exception as e:
                messagebox.showerror("Error", f"Could not save file: {str(e)}")
                return False
        return False
    
    def check_save_changes(self):
        if self.modified:
            response = messagebox.askyesnocancel(
                "Save Changes",
                "Do you want to save changes to the current document?"
            )
            if response:  # Yes
                return self.save_file()
            elif response is None:  # Cancel
                return False
            else:  # No
                return True
        return True
    
    def cut_text(self):
        try:
            self.text_area.event_generate("<<Cut>>")
        except tk.TclError:
            pass
    
    def copy_text(self):
        try:
            self.text_area.event_generate("<<Copy>>")
        except tk.TclError:
            pass
    
    def paste_text(self):
        try:
            self.text_area.event_generate("<<Paste>>")
        except tk.TclError:
            pass
    
    def select_all(self):
        self.text_area.tag_add(tk.SEL, "1.0", tk.END)
        self.text_area.mark_set(tk.INSERT, "1.0")
        self.text_area.see(tk.INSERT)
    
    def exit_app(self):
        if self.check_save_changes():
            self.root.quit()

def main():
    root = tk.Tk()
    app = SimpleTextEditor(root)
    
    # Handle window close event
    root.protocol("WM_DELETE_WINDOW", app.exit_app)
    
    root.mainloop()

if __name__ == "__main__":
    main()
